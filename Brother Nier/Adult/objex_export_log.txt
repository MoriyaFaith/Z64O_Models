WARNING:objex.OBJEX_OT_export.execute: Scene uses display_device='sRGB' which changes how colors are displayed in the viewport, reducing the preview accuracy.
This can be changed under Color Management in Render properties.
Note that this should also be kept consistent with the Color Space property of image texture nodes (display_device="None", Color Space="Linear").
Recommended value: None
INFO:objex.OBJEX_OT_export.progress_report_print:   (  0.0000 sec |   0.0000 sec) Objex Export path: 'D:\\Games\\Modding\\Zelda 64\\Models\\Z64O_Models\\Brother Nier\\Adult\\object_link_boy.objex'
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0042 sec |   0.0005 sec) Finished writing geometry of 'Sun'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Shield.3, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0216 sec |   0.0116 sec) Finished writing geometry of 'Shield.3'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Hookshot.Spike, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0301 sec |   0.0062 sec) Finished writing geometry of 'Hookshot.Spike'.
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0337 sec |   0.0011 sec) Finished writing geometry of 'skeleton'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Sheath.3, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0416 sec |   0.0053 sec) Finished writing geometry of 'Sheath.3'.
WARNING:objex.ObjexWriter.write_object: Mesh Sheath is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0473 sec |   0.0042 sec) Finished writing geometry of 'Sheath'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Broken.Blade.3, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0515 sec |   0.0036 sec) Finished writing geometry of 'Broken.Blade.3'.
WARNING:objex.ObjexWriter.write_object: Mesh riggedmesh is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1183 sec |   0.0651 sec) Finished writing geometry of 'riggedmesh'.
WARNING:objex.ObjexWriter.write_object: Mesh Fist.L is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1272 sec |   0.0073 sec) Finished writing geometry of 'Fist.L'.
WARNING:objex.ObjexWriter.write_object: Mesh Fist.R is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1346 sec |   0.0058 sec) Finished writing geometry of 'Fist.R'.
WARNING:objex.ObjexWriter.write_object: Mesh Bottle.Hand.L is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1418 sec |   0.0057 sec) Finished writing geometry of 'Bottle.Hand.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Ocarina.2, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1481 sec |   0.0053 sec) Finished writing geometry of 'Ocarina.2'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Blade.2, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1630 sec |   0.0128 sec) Finished writing geometry of 'Blade.2'.
WARNING:objex.ObjexWriter.write_object: Mesh Hilt.2 is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1897 sec |   0.0247 sec) Finished writing geometry of 'Hilt.2'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Shield.2, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1997 sec |   0.0084 sec) Finished writing geometry of 'Shield.2'.
WARNING:objex.ObjexWriter.write_object: Mesh Blade.3 is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2102 sec |   0.0063 sec) Finished writing geometry of 'Blade.3'.
WARNING:objex.ObjexWriter.write_object: Object Bottle was found to be rigged to skeleton but it also has an armature deform modifier using None
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Bottle, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2217 sec |   0.0099 sec) Finished writing geometry of 'Bottle'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Hilt.3, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2418 sec |   0.0170 sec) Finished writing geometry of 'Hilt.3'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Gauntlet.Fist.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2566 sec |   0.0132 sec) Finished writing geometry of 'Gauntlet.Fist.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Gauntlet.Fist.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2750 sec |   0.0112 sec) Finished writing geometry of 'Gauntlet.Fist.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Gauntlet.Forearm.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2882 sec |   0.0105 sec) Finished writing geometry of 'Gauntlet.Forearm.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Gauntlet.Forearm.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.3014 sec |   0.0111 sec) Finished writing geometry of 'Gauntlet.Forearm.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Gauntlet.Hand.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.3136 sec |   0.0079 sec) Finished writing geometry of 'Gauntlet.Hand.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Gauntlet.Hand.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.3267 sec |   0.0105 sec) Finished writing geometry of 'Gauntlet.Hand.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Foot.2.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.3388 sec |   0.0105 sec) Finished writing geometry of 'Foot.2.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Foot.2.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.3478 sec |   0.0074 sec) Finished writing geometry of 'Foot.2.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Foot.3.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.3625 sec |   0.0126 sec) Finished writing geometry of 'Foot.3.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Foot.3.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.3771 sec |   0.0115 sec) Finished writing geometry of 'Foot.3.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Bow, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.3880 sec |   0.0099 sec) Finished writing geometry of 'Bow'.
WARNING:objex.ObjexWriter.write_object: Mesh Hammer is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.4006 sec |   0.0115 sec) Finished writing geometry of 'Hammer'.
WARNING:objex.ObjexWriter.write_object: Mesh Hookshot is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.4224 sec |   0.0198 sec) Finished writing geometry of 'Hookshot'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating FPS.Forearm.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.4373 sec |   0.0133 sec) Finished writing geometry of 'FPS.Forearm.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Blade.3.Break, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.4441 sec |   0.0057 sec) Finished writing geometry of 'Blade.3.Break'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Bow.String, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.4493 sec |   0.0037 sec) Finished writing geometry of 'Bow.String'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating FPS.Forearm.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.4611 sec |   0.0101 sec) Finished writing geometry of 'FPS.Forearm.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating FPS.Hand.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.4740 sec |   0.0113 sec) Finished writing geometry of 'FPS.Hand.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating FPS.Hand.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.4846 sec |   0.0096 sec) Finished writing geometry of 'FPS.Hand.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Hookshot.Aiming.Reticule, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.4893 sec |   0.0031 sec) Finished writing geometry of 'Hookshot.Aiming.Reticule'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Hookshot.Chain, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.4945 sec |   0.0036 sec) Finished writing geometry of 'Hookshot.Chain'.
WARNING:objex.ObjexWriter.write_object: Mesh FPS.Hookshot is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.5209 sec |   0.0242 sec) Finished writing geometry of 'FPS.Hookshot'.
INFO:objex.OBJEX_OT_export.progress_report_print:     (  0.5236 sec |   0.5205 sec) Finished exporting geometry, now exporting materials
TRACE:objex.export_objex_mtl.write_mtl: Writing name='metal' name_q='"metal"' material=Evaluated Material 'metal' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}, 'texel0A': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806} and texel0A {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806} into texel0 {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='metal.shield' name_q='"metal.shield"' material=Evaluated Material 'metal.shield' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}, 'texel0A': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.5711250901222229, 0.18116427958011627, 0.005181528627872467, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806} and texel0A {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806} into texel0 {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture 04000000.tga <bpy_struct, Image("04000000.tga")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='string' name_q='"string"' material=Evaluated Material 'string' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['06005600_ZZPAL1.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['06005600_ZZPAL1.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['06005600_ZZPAL1.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['06005600_ZZPAL1.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['06005600_ZZPAL1.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='mtl_0601C610.001' name_q='"mtl_0601C610.001"' material=Evaluated Material 'mtl_0601C610.001' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['0601C610.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0601C610.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0601C610.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0601C610.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0601C610.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='geruto.insignia.002' name_q='"geruto.insignia.002"' material=Evaluated Material 'geruto.insignia.002' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['0601C910.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0601C910.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0601C910.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0601C910.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0601C910.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='bg.sheath' name_q='"bg.sheath"' material=Evaluated Material 'bg.sheath' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['BG_Sheath.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['BG_Sheath.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['BG_Sheath.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['BG_Sheath.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['BG_Sheath.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='sheath.tip' name_q='"sheath.tip"' material=Evaluated Material 'sheath.tip' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['06008CE8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['06008CE8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['06008CE8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['06008CE8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['06008CE8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='sheath' name_q='"sheath"' material=Evaluated Material 'sheath' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['060086E8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['060086E8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['060086E8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['060086E8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['060086E8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='fur' name_q='"fur"' material=Evaluated Material 'fur' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['06005280.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['06005280.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.005181517452001572, 0.00518151605501771, 0.005181516520678997, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['06005280.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['06005280.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['06005280.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='tunic.1' name_q='"tunic.1"' material=Evaluated Material 'tunic.1' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'environmentRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'environmentA': 1.0, 'texel0RGB': {'image': bpy.data.images['arms.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['arms.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged environmentRGB bpy.data.node_groups['Shader Nodetree']...default_value and environmentA 1.0 into environment (0.01161224115639925, 0.14126332104206085, 0.01161225140094757, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['arms.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['arms.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['arms.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='tunic.2' name_q='"tunic.2"' material=Evaluated Material 'tunic.2' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'environmentRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'environmentA': 1.0, 'texel0RGB': {'image': bpy.data.images['top.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['top.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged environmentRGB bpy.data.node_groups['Shader Nodetree']...default_value and environmentA 1.0 into environment (0.01161224115639925, 0.14126332104206085, 0.01161225140094757, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['top.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['top.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['top.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='fingers' name_q='"fingers"' material=Evaluated Material 'fingers' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['hand'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['hand'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['hand'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['hand'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['hand'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='undershirt.limbs' name_q='"undershirt.limbs"' material=Evaluated Material 'undershirt.limbs' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['06005E80.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['06005E80.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['06005E80.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['06005E80.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['06005E80.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='nose.bridge' name_q='"nose.bridge"' material=Evaluated Material 'nose.bridge' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['bridge'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['bridge'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['bridge'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['bridge'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['bridge'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='nose' name_q='"nose"' material=Evaluated Material 'nose' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['nostril'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['nostril'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['nostril'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['nostril'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['nostril'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='eyes' name_q='"eyes"' material=Evaluated Material 'eyes' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['eyes.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['eyes.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['eyes.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['eyes.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['eyes.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='ears' name_q='"ears"' material=Evaluated Material 'ears' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['ear'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['ear'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['ear'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['ear'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['ear'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='mouth' name_q='"mouth"' material=Evaluated Material 'mouth' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['mouth'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['mouth'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['mouth'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['mouth'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['mouth'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hair' name_q='"hair"' material=Evaluated Material 'hair' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['hair'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['hair'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['hair'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['hair'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['hair'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='undershirt' name_q='"undershirt"' material=Evaluated Material 'undershirt' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['06008EE8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['06008EE8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['06008EE8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['06008EE8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['06008EE8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='metal.black' name_q='"metal.black"' material=Evaluated Material 'metal.black' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.014999999664723873, 'uv_scale_v_main': 0.014999999664723873}, 'texel0A': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.014999999664723873, 'uv_scale_v_main': 0.014999999664723873}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.03560134023427963, 0.03560132905840874, 0.035601332783699036, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.014999999664723873, 'uv_scale_v_main': 0.014999999664723873} and texel0A {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.014999999664723873, 'uv_scale_v_main': 0.014999999664723873} into texel0 {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.014999999664723873, 'uv_scale_v_main': 0.014999999664723873}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture 04000000.tga <bpy_struct, Image("04000000.tga")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hookshot.chain' name_q='"hookshot.chain"' material=Evaluated Material 'hookshot.chain' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['0602B338.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0602B338.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0602B338.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0602B338.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0602B338.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='grip' name_q='"grip"' material=Evaluated Material 'grip' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['gripper1'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['gripper1'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['gripper1'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['gripper1'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['gripper1'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='side' name_q='"side"' material=Evaluated Material 'side' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['gripper2'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['gripper2'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['gripper2'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['gripper2'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['gripper2'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='ocarina' name_q='"ocarina"' material=Evaluated Material 'ocarina' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['04001400.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['04001400.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['04001400.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['04001400.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['04001400.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='ms.symbol_v4' name_q='"ms.symbol_v4"' material=Evaluated Material 'ms.symbol_v4' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 0.75, 'texel0RGB': {'image': bpy.data.images['ms_insignia.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['ms_insignia.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 0.75 into primitive (1.0, 1.0, 1.0, 0.75)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['ms_insignia.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['ms_insignia.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['ms_insignia.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hilt_black' name_q='"hilt_black"' material=Evaluated Material 'hilt_black' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'environmentRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'environmentA': 1.0, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.013702086172997952, 0.01599629409611225, 0.023153362795710564, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged environmentRGB bpy.data.node_groups['Shader Nodetree']...default_value and environmentA 1.0 into environment (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hilt_gold' name_q='"hilt_gold"' material=Evaluated Material 'hilt_gold' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}, 'texel0A': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.6387941837310791, 0.4741193950176239, 0.33027383685112, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806} and texel0A {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806} into texel0 {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture 04000000.tga <bpy_struct, Image("04000000.tga")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='shield.back.002' name_q='"shield.back.002"' material=Evaluated Material 'shield.back.002' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['06009768.tga.003'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['06009768.tga.003'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['06009768.tga.003'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['06009768.tga.003'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['06009768.tga.003'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hylian.crest.002' name_q='"hylian.crest.002"' material=Evaluated Material 'hylian.crest.002' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['ytface.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['ytface.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['ytface.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['ytface.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['ytface.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='glass' name_q='"glass"' material=Evaluated Material 'glass' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 0.75, 'texel0RGB': {'image': bpy.data.images['06000508.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': False, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}, 'texel0A': {'image': bpy.data.images['06000508.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': False, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 0.75 into primitive (1.0, 1.0, 1.0, 0.75)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['06000508.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': False, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806} and texel0A {'image': bpy.data.images['06000508.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': False, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806} into texel0 {'image': bpy.data.images['06000508.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': False, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='liquid' name_q='"liquid"' material=Evaluated Material 'liquid' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveA': 0.75, 'environmentRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'texel0RGB': {'image': bpy.data.images['liquid.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': False, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}, 'texel0A': {'image': bpy.data.images['liquid.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': False, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['liquid.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': False, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806} and texel0A {'image': bpy.data.images['liquid.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': False, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806} into texel0 {'image': bpy.data.images['liquid.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': True, 'uv_mirror_v': True, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': False, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='metal.grey' name_q='"metal.grey"' material=Evaluated Material 'metal.grey' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.014999999664723873, 'uv_scale_v_main': 0.014999999664723873}, 'texel0A': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.014999999664723873, 'uv_scale_v_main': 0.014999999664723873}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.13013648986816406, 0.13013651967048645, 0.13013651967048645, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.014999999664723873, 'uv_scale_v_main': 0.014999999664723873} and texel0A {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.014999999664723873, 'uv_scale_v_main': 0.014999999664723873} into texel0 {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.014999999664723873, 'uv_scale_v_main': 0.014999999664723873}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture 04000000.tga <bpy_struct, Image("04000000.tga")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='metal.red' name_q='"metal.red"' material=Evaluated Material 'metal.red' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}, 'texel0A': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.6795426607131958, 0.0, 0.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806} and texel0A {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806} into texel0 {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.05000000074505806, 'uv_scale_v_main': 0.05000000074505806}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture 04000000.tga <bpy_struct, Image("04000000.tga")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='metal.gold' name_q='"metal.gold"' material=Evaluated Material 'metal.gold' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'environmentRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'environmentA': 1.0, 'texel0RGB': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.02500000037252903, 'uv_scale_v_main': 0.02500000037252903}, 'texel0A': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.02500000037252903, 'uv_scale_v_main': 0.02500000037252903}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged environmentRGB bpy.data.node_groups['Shader Nodetree']...default_value and environmentA 1.0 into environment (1.0, 1.0, 0.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.02500000037252903, 'uv_scale_v_main': 0.02500000037252903} and texel0A {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.02500000037252903, 'uv_scale_v_main': 0.02500000037252903} into texel0 {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': True, 'texgen_linear': True, 'uv_scale_u_main': 0.02500000037252903, 'uv_scale_v_main': 0.02500000037252903}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture 04000000.tga <bpy_struct, Image("04000000.tga")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='gauntlet.hand' name_q='"gauntlet.hand"' material=Evaluated Material 'gauntlet.hand' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'environmentRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'environmentA': 1.0, 'texel0RGB': {'image': bpy.data.images['0600BEE8.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0600BEE8.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged environmentRGB bpy.data.node_groups['Shader Nodetree']...default_value and environmentA 1.0 into environment (1.0, 1.0, 0.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0600BEE8.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0600BEE8.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0600BEE8.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='gauntlet.arm' name_q='"gauntlet.arm"' material=Evaluated Material 'gauntlet.arm' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'environmentRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'environmentA': 1.0, 'texel0RGB': {'image': bpy.data.images['0600BAE8.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0600BAE8.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged environmentRGB bpy.data.node_groups['Shader Nodetree']...default_value and environmentA 1.0 into environment (1.0, 1.0, 0.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0600BAE8.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0600BAE8.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0600BAE8.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='bolt' name_q='"bolt"' material=Evaluated Material 'bolt' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['0600C6E8.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0600C6E8.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0600C6E8.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0600C6E8.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0600C6E8.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='metal.iron' name_q='"metal.iron"' material=Evaluated Material 'metal.iron' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.04666508361697197, 0.04666510224342346, 0.08865559101104736, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture 04000000.tga <bpy_struct, Image("04000000.tga")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hover.main' name_q='"hover.main"' material=Evaluated Material 'hover.main' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['3ds_hoverboots.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['3ds_hoverboots.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['3ds_hoverboots.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['3ds_hoverboots.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['3ds_hoverboots.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='metal.hover' name_q='"metal.hover"' material=Evaluated Material 'metal.hover' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.5088813900947571, 0.44520118832588196, 0.16513225436210632, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['04000000.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture 04000000.tga <bpy_struct, Image("04000000.tga")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='wood.blue' name_q='"wood.blue"' material=Evaluated Material 'wood.blue' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.05951124429702759, 0.05951128527522087, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='wood.brown' name_q='"wood.brown"' material=Evaluated Material 'wood.brown' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.6938719749450684, 0.4072403013706207, 0.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture 0600B168.tga.001 <bpy_struct, Image("0600B168.tga.001")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='bow.string' name_q='"bow.string"' material=Evaluated Material 'bow.string' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['biggoron_handle.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['biggoron_handle.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['biggoron_handle.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['biggoron_handle.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['biggoron_handle.png'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='wood.red' name_q='"wood.red"' material=Evaluated Material 'wood.red' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.658375084400177, 0.0, 0.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture 0600B168.tga.001 <bpy_struct, Image("0600B168.tga.001")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='wood.grip' name_q='"wood.grip"' material=Evaluated Material 'wood.grip' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 0.7230552434921265, 0.31854692101478577, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0600B168.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture 0600B168.tga.001 <bpy_struct, Image("0600B168.tga.001")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hammer.grip' name_q='"hammer.grip"' material=Evaluated Material 'hammer.grip' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['04001A00.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['04001A00.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (0.07818744331598282, 0.0, 0.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['04001A00.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['04001A00.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['04001A00.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='handle' name_q='"handle"' material=Evaluated Material 'handle' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['0600B228.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0600B228.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0600B228.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0600B228.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0600B228.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='chain' name_q='"chain"' material=Evaluated Material 'chain' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['0600B2A8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0600B2A8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0600B2A8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0600B2A8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0600B2A8.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='body.001' name_q='"body.001"' material=Evaluated Material 'body.001' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['0600B1A8.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['0600B1A8.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['0600B1A8.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['0600B1A8.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['0600B1A8.tga.001'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': False, 'uv_wrap_v': False, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='cuffs' name_q='"cuffs"' material=Evaluated Material 'cuffs' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['06007880.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['06007880.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['06007880.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['06007880.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['06007880.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='Bow_String' name_q='"Bow_String"' material=Evaluated Material 'Bow_String' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_ENVIRONMENT': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'environmentRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'environmentA': 1.0, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged environmentRGB bpy.data.node_groups['Shader Nodetree']...default_value and environmentA 1.0 into environment (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='glove.palm' name_q='"glove.palm"' material=Evaluated Material 'glove.palm' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['06006480.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['06006480.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['06006480.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['06006480.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['06006480.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='glove.back' name_q='"glove.back"' material=Evaluated Material 'glove.back' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['06008080.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['06008080.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['06008080.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['06008080.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['06008080.tga'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='Hookshot.Aim' name_q='"Hookshot.Aim"' material=Evaluated Material 'Hookshot.Aim' face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_ACMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_SHADE': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_TEXEL0': Evaluated NodeTree 'Shader Nodetree', 'G_CCMUX_PRIMITIVE': Evaluated NodeTree 'Shader Nodetree'}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeA from Evaluated NodeTree 'Shader Nodetree' (socket node: Evaluated NodeTree 'Shader Nodetree')
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data.node_groups['Shader Nodetree']...default_value, 'primitiveA': 1.0, 'texel0RGB': {'image': bpy.data.images['earring'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['earring'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}, 'shadeA': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data.node_groups['Shader Nodetree']...default_value and primitiveA 1.0 into primitive (1.0, 1.0, 1.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['earring'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['earring'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['earring'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged shadeRGB {'type': 'normals'} and shadeA {'type': 'normals'} into shade {'type': 'normals'}
INFO:objex.OBJEX_OT_export.progress_report_print:     (  0.6428 sec |   0.6397 sec) Finished exporting materials, now exporting skeletons/animations
INFO:objex.ObjexWriter.write: now exporting skeletons
INFO:objex.ObjexWriter.write:  ... and animations
INFO:objex.OBJEX_OT_export.progress_report_print:     (  0.6454 sec |   0.6423 sec) Objex Export Finished
